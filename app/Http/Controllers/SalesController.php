<?php
 namespace App\Http\Controllers; use App\Models\accounts; use App\Models\orders; use App\Models\products; use App\Models\sale_details; use App\Models\sale_payments; use App\Models\sales; use App\Models\salesman; use App\Models\stock; use App\Models\transactions; use App\Models\units; use App\Models\User; use Exception; use Illuminate\Http\Request; use Illuminate\Support\Facades\DB; class SalesController extends Controller { public function index(Request $request) { $start = $request->start ?? now()->toDateString(); $end = $request->end ?? now()->toDateString(); $sales = sales::with("\160\141\171\x6d\145\156\x74\x73")->whereBetween("\x64\x61\x74\x65", array($start, $end))->orderby("\x69\x64", "\x64\x65\x73\x63")->get(); return view("\x73\x61\154\x65\x73\56\x69\x6e\x64\x65\x78", compact("\163\141\x6c\x65\163", "\163\164\x61\162\x74", "\145\x6e\144")); } public function create() { $products = products::orderby("\156\141\155\145", "\x61\x73\x63")->get(); foreach ($products as $product) { $stock = getStock($product->id); $product->stock = $stock; } $units = units::all(); $customers = accounts::customer()->get(); $accounts = accounts::business()->get(); $orderbookers = User::where("\162\x6f\154\x65", "\x4f\x72\144\145\x72\x62\x6f\x6f\153\x65\162")->get(); return view("\x73\x61\154\145\163\x2e\143\162\x65\x61\164\x65", compact("\160\162\x6f\x64\165\143\x74\163", "\x75\x6e\x69\164\163", "\143\165\163\164\157\x6d\x65\162\x73", "\141\143\x63\157\165\156\164\163", "\x6f\x72\144\x65\x72\142\x6f\157\153\x65\x72\163")); } public function store(Request $request) { try { if ($request->isNotFilled("\x69\x64")) { throw new Exception("\x50\154\x65\x61\163\145\40\123\x65\154\x65\143\x74\x20\101\164\x6c\145\x61\x73\164\x20\x4f\x6e\145\40\120\162\157\144\165\x63\x74"); } DB::beginTransaction(); $ref = getRef(); $sale = sales::create(array("\x63\x75\x73\164\157\x6d\x65\162\x49\104" => $request->customerID, "\x64\x61\x74\145" => $request->date, "\156\x6f\x74\x65\x73" => $request->notes, "\x64\151\x73\x63\157\x75\156\x74" => $request->discount1, "\146\162\151\x67\150\164" => $request->fright, "\x66\162\151\147\x68\164\x31" => $request->fright1, "\x77\x68" => $request->whTax, "\157\x72\144\x65\162\x62\x6f\x6f\x6b\x65\162\x49\x44" => $request->orderbookerID, "\x72\x65\146\111\x44" => $ref)); $ids = $request->id; $total = 0; foreach ($ids as $key => $id) { $unit = units::find($request->unit[$key]); $qty1 = $request->qty[$key] * $unit->value + $request->bonus[$key]; $qty = $request->qty[$key] * $unit->value; $price = $request->price[$key]; $total += $request->ti[$key]; sale_details::create(array("\x73\x61\154\x65\163\111\x44" => $sale->id, "\x70\x72\157\144\165\x63\164\x49\104" => $id, "\160\x72\151\x63\x65" => $price, "\161\x74\171" => $qty, "\144\151\x73\143\x6f\165\156\x74" => $request->discount[$key], "\x74\x69" => $request->ti[$key], "\x74\x70" => $request->tp[$key], "\147\163\x74" => $request->gst[$key], "\x67\x73\164\126\141\x6c\x75\x65" => $request->gstValue[$key], "\x64\141\164\145" => $request->date, "\x62\157\x6e\x75\163" => $request->bonus[$key], "\x75\156\x69\164\111\x44" => $unit->id, "\x75\x6e\x69\x74\126\141\x6c\x75\x65" => $unit->value, "\x72\145\146\x49\x44" => $ref)); createStock($id, 0, $qty1, $request->date, "\x53\157\154\144\40\x69\x6e\x20\111\156\166\40\x23\40{$sale->id}", $ref); } $whTax = $total * $request->whTax / 100; $net = $total + $whTax + $request->fright1 - ($request->discount1 + $request->fright); $sale->update(array("\x77\x68\126\x61\x6c\165\x65" => $whTax, "\x6e\145\164" => $net)); if ($request->status == "\x70\141\x69\144") { sale_payments::create(array("\x73\141\154\x65\x73\111\104" => $sale->id, "\x61\x63\143\157\165\x6e\164\111\x44" => $request->accountID, "\x64\x61\x74\145" => $request->date, "\141\x6d\157\x75\x6e\x74" => $net, "\x6e\x6f\x74\x65\163" => "\x46\165\x6c\x6c\40\120\141\x69\x64", "\x72\x65\x66\x49\x44" => $ref)); createTransaction($request->accountID, $request->date, $net, 0, "\x50\141\171\x6d\145\156\x74\x20\157\146\x20\x49\x6e\x76\40\x4e\x6f\56\40{$sale->id}", $ref); createTransaction($request->customerID, $request->date, $net, $net, "\120\141\x79\155\x65\156\x74\x20\x6f\x66\40\111\x6e\166\40\116\x6f\56\x20{$sale->id}", $ref); } else { createTransaction($request->customerID, $request->date, 0, $net, "\120\x65\156\x64\x69\156\147\x20\x41\155\157\x75\x6e\x74\x20\157\x66\40\111\x6e\x76\40\x4e\x6f\56\x20{$sale->id}", $ref); } if ($request->orderID) { $order = orders::find($request->orderID); $order->update(array("\163\141\154\145\111\x44" => $sale->id, "\163\164\141\x74\x75\x73" => "\103\x6f\155\x70\x6c\x65\164\145\144")); } DB::commit(); return to_route("\x73\141\154\x65\56\x73\150\x6f\x77", $sale->id)->with("\x73\165\x63\x63\145\x73\163", "\x53\141\x6c\145\40\x43\162\145\x61\x74\x65\x64"); } catch (\Exception $e) { DB::rollback(); return back()->with("\x65\162\162\x6f\x72", $e->getMessage()); } } public function show(sales $sale) { $balance = spotBalance($sale->customerID, $sale->refID); return view("\x73\141\154\145\x73\x2e\x76\151\145\x77", compact("\163\141\x6c\145", "\142\x61\154\141\x6e\x63\x65")); } public function gatePass($id) { $sale = sales::find($id); return view("\x73\141\154\x65\163\x2e\147\141\164\x65\x70\x61\x73\163", compact("\x73\141\x6c\x65")); } public function edit(sales $sale) { $products = products::orderby("\x6e\x61\x6d\145", "\141\163\x63")->get(); $units = units::all(); $customers = accounts::customer()->get(); $accounts = accounts::business()->get(); $orderbookers = User::where("\x72\157\x6c\x65", "\117\x72\144\145\x72\x62\157\x6f\153\145\162")->get(); return view("\x73\141\154\145\163\x2e\145\x64\151\x74", compact("\x70\x72\157\144\x75\143\164\x73", "\x75\156\151\164\163", "\143\165\163\164\x6f\x6d\x65\x72\x73", "\141\x63\143\157\x75\156\x74\163", "\x73\x61\154\145", "\157\x72\x64\145\x72\142\157\x6f\x6b\x65\x72\x73")); } public function update(Request $request, $id) { try { DB::beginTransaction(); $sale = sales::find($id); foreach ($sale->payments as $payment) { transactions::where("\x72\145\x66\x49\x44", $payment->refID)->delete(); $payment->delete(); } foreach ($sale->details as $product) { stock::where("\162\x65\146\111\x44", $product->refID)->delete(); $product->delete(); } transactions::where("\162\145\x66\x49\x44", $sale->refID)->delete(); $ref = $sale->refID; $sale->update(array("\143\x75\163\164\x6f\155\x65\x72\x49\104" => $request->customerID, "\x64\x61\164\x65" => $request->date, "\x6e\157\164\145\163" => $request->notes, "\144\x69\x73\143\157\165\x6e\x74" => $request->discount1, "\x66\162\151\x67\150\164" => $request->fright, "\146\162\x69\x67\x68\x74\61" => $request->fright1, "\167\x68" => $request->whTax, "\157\x72\144\145\162\x62\157\157\153\x65\162\111\x44" => $request->orderbookerID, "\162\145\146\x49\x44" => $ref)); $ids = $request->id; $total = 0; foreach ($ids as $key => $id) { $unit = units::find($request->unit[$key]); $qty = $request->qty[$key] * $unit->value; $price = $request->price[$key]; $total += $request->ti[$key]; sale_details::create(array("\163\141\154\x65\163\x49\104" => $sale->id, "\160\162\x6f\x64\x75\143\x74\x49\104" => $id, "\x70\162\151\143\145" => $price, "\161\x74\x79" => $qty, "\x64\x69\163\143\157\x75\x6e\164" => $request->discount[$key], "\x74\x69" => $request->ti[$key], "\x74\x70" => $request->tp[$key], "\x67\163\x74" => $request->gst[$key], "\x67\x73\164\126\x61\x6c\x75\145" => $request->gstValue[$key], "\x64\141\x74\x65" => $request->date, "\165\156\x69\164\x49\104" => $unit->id, "\x75\156\x69\164\126\141\x6c\x75\145" => $unit->value, "\162\145\146\x49\104" => $sale->refID)); createStock($id, 0, $qty, $request->date, "\123\157\154\x64\40\151\156\x20\x49\x6e\166\x20\x23\x20{$sale->id}", $sale->refID); } $whTax = $total * $request->whTax / 100; $net = $total + $whTax + $request->fright1 - ($request->discount1 + $request->fright); dashboard(); $sale->update(array("\x77\x68\126\141\154\x75\145" => $whTax, "\156\145\x74" => $net)); if ($request->status == "\160\141\x69\144") { sale_payments::create(array("\163\141\154\x65\x73\111\104" => $sale->id, "\x61\143\x63\157\165\x6e\164\x49\x44" => $request->accountID, "\x64\x61\x74\145" => $request->date, "\141\x6d\157\x75\156\164" => $net, "\156\x6f\x74\x65\163" => "\106\x75\x6c\x6c\x20\x50\x61\x69\x64", "\162\145\x66\111\104" => $sale->refID)); createTransaction($request->accountID, $request->date, $net, 0, "\x50\x61\x79\x6d\145\x6e\x74\x20\157\x66\40\111\x6e\x76\40\x4e\x6f\x2e\40{$sale->id}", $sale->refID); createTransaction($request->customerID, $request->date, $net, $net, "\x50\141\171\x6d\145\x6e\x74\40\157\x66\40\x49\156\x76\x20\116\157\x2e\x20{$sale->id}", $ref); } else { createTransaction($request->customerID, $request->date, 0, $net, "\120\x65\x6e\144\x69\x6e\x67\40\x41\155\x6f\x75\x6e\164\x20\157\146\x20\x49\x6e\166\40\x4e\x6f\x2e\40{$sale->id}", $sale->refID); } DB::commit(); return to_route("\163\x61\154\x65\56\151\x6e\x64\x65\x78")->with("\163\x75\143\x63\x65\x73\x73", "\123\x61\154\145\40\x55\160\144\x61\x74\145\x64"); } catch (\Exception $e) { DB::rollBack(); return to_route("\x73\x61\154\x65\x2e\x69\156\144\x65\x78")->with("\x65\x72\x72\157\x72", $e->getMessage()); } } public function destroy($id) { try { DB::beginTransaction(); $sale = sales::find($id); foreach ($sale->payments as $payment) { transactions::where("\x72\x65\146\111\104", $payment->refID)->delete(); $payment->delete(); } foreach ($sale->details as $product) { stock::where("\162\x65\x66\111\x44", $product->refID)->delete(); $product->delete(); } transactions::where("\162\145\146\x49\104", $sale->refID)->delete(); $sale->delete(); DB::commit(); session()->forget("\x63\157\x6e\146\x69\162\x6d\x65\144\137\x70\141\x73\x73\167\x6f\x72\x64"); return to_route("\x73\141\x6c\145\x2e\x69\156\x64\145\x78")->with("\163\165\x63\143\145\163\x73", "\x53\x61\154\x65\40\x44\x65\x6c\145\164\x65\x64"); } catch (\Exception $e) { DB::rollBack(); session()->forget("\x63\157\x6e\x66\x69\x72\x6d\145\144\137\160\x61\x73\163\x77\157\x72\x64"); return to_route("\x73\141\154\x65\x2e\x69\156\144\x65\170")->with("\x65\x72\x72\157\162", $e->getMessage()); } } public function getSignleProduct($id) { $product = products::with("\x75\x6e\x69\x74")->find($id); $stocks = stock::select(DB::raw("\x53\125\115\x28\143\x72\x29\40\x2d\x20\x53\x55\115\x28\144\142\51\40\x41\123\x20\x62\141\x6c\141\156\x63\145"))->where("\x70\162\157\144\165\x63\x74\111\x44", $product->id)->get(); $product->stock = getStock($id); return $product; } public function getProductByCode($code) { $product = products::where("\143\x6f\144\145", $code)->first(); if ($product) { return $product->id; } return "\x4e\x6f\x74\x20\x46\x6f\x75\156\144"; } }

<?php
 use App\Models\material_stock; use App\Models\products; use App\Models\purchase_details; use App\Models\ref; use App\Models\sale_details; use App\Models\stock; use Carbon\Carbon; use Illuminate\Support\Facades\DB; goto HPgbk; H_vwy: function createStock($id, $cr, $db, $date, $notes, $ref) { stock::create(array("\160\x72\157\x64\165\143\x74\x49\x44" => $id, "\x63\x72" => $cr, "\144\142" => $db, "\144\141\x74\145" => $date, "\x6e\x6f\x74\145\x73" => $notes, "\x72\145\146\111\x44" => $ref)); } goto gHENV; UV9eL: function lastDayOfPreviousYear() { $endOfPreviousYear = Carbon::now()->subYear()->endOfYear(); return $endOfPreviousYear->format("\131\x2d\155\55\x64"); } goto H_vwy; WFJMR: function avgSalePrice($from, $to, $id) { $sales = sale_details::where("\160\x72\157\144\x75\143\164\111\x44", $id); if ($from != "\x61\x6c\x6c" && $to != "\141\154\x6c") { $sales->whereBetween("\144\141\164\x65", array($from, $to)); } $sales_amount = $sales->sum("\x74\x69"); $sales_qty = $sales->sum("\161\x74\x79"); if ($sales_qty > 0) { $sale_price = $sales_amount / $sales_qty; } else { $product = products::find($id); $sale_price = $product->price; } return $sale_price; } goto ExqHO; wxVEc: function firstDayOfCurrentYear() { $startOfYear = Carbon::now()->startOfYear(); return $startOfYear->format("\131\55\x6d\x2d\144"); } goto csJyC; S3Cev: function firstDayOfPreviousYear() { $startOfPreviousYear = Carbon::now()->subYear()->startOfYear(); return $startOfPreviousYear->format("\x59\55\155\x2d\x64"); } goto UV9eL; ilUUT: function productStockValue($id) { $stock = getStock($id); $price = avgPurchasePrice("\x61\x6c\154", "\141\x6c\154", $id); dashboard(); return $price * $stock; } goto Z0eHn; HPqt5: function lastDayOfMonth() { $endOfMonth = Carbon::now()->endOfMonth(); return $endOfMonth->format("\131\x2d\x6d\x2d\x64"); } goto wxVEc; ZHyWD: function stockValue() { $products = products::all(); $value = 0; foreach ($products as $product) { $value += productStockValue($product->id); } return $value; } goto ilUUT; HPgbk: function getRef() { $ref = ref::first(); if ($ref) { $ref->ref = $ref->ref + 1; } else { $ref = new ref(); $ref->ref = 1; } $ref->save(); dashboard(); return $ref->ref; } goto p4uo2; ExqHO: function avgPurchasePrice($from, $to, $id) { $purchases = purchase_details::where("\160\162\x6f\x64\165\x63\164\x49\104", $id); if ($from != "\141\x6c\154" && $to != "\141\x6c\x6c") { $purchases->whereBetween("\x64\x61\x74\x65", array($from, $to)); } $purchase_amount = $purchases->sum("\141\x6d\157\x75\156\164"); $purchase_qty = $purchases->sum("\161\164\x79"); if ($purchase_qty > 0) { $purchase_price = $purchase_amount / $purchase_qty; } else { $product = products::find($id); $purchase_price = $product->pprice; } return $purchase_price; } goto ZHyWD; gHENV: function getStock($id) { $stocks = stock::where("\x70\162\157\x64\165\143\x74\111\104", $id)->get(); $balance = 0; foreach ($stocks as $stock) { $balance += $stock->cr; $balance -= $stock->db; } return $balance; } goto WFJMR; p4uo2: function firstDayOfMonth() { $startOfMonth = Carbon::now()->startOfMonth(); return $startOfMonth->format("\x59\55\x6d\x2d\144"); } goto HPqt5; csJyC: function lastDayOfCurrentYear() { $endOfYear = Carbon::now()->endOfYear(); return $endOfYear->format("\131\55\x6d\x2d\x64"); } goto S3Cev; Z0eHn: function calculateGrowthPercentage($oldValue, $newValue) { if ($oldValue == 0) { return $newValue > 0 ? 100 : 0; } $growthPercentage = ($newValue - $oldValue) / $oldValue * 100; return $growthPercentage; }

